import React from "react";
import axios from "axios";

const baseURL = "https://3001-white-deer-29bz903j.ws-us03.gitpod.io";

export default class TodoList extends React.Component {
  state = {
    tasks: [],
    newTaskTitle: "",
    editedTaskTitle: "",
    editedTaskDone: false,
    editingTask: false
  };

  // lifecycle method
  async componentDidMount() {
    let response = await axios.get(baseURL + "/task");
    this.setState({
      tasks: response.data
    });
  }

  renderTaskList = () => {
    let accum = [];
    for (let t of this.state.tasks) {
      accum.push(
        <div key={t._id}>
          {t.title}
          <input
            type="checkbox"
            checked={t.done}
            onChange={() => {
              this.updateTaskCheckbox(t);
            }}
          />
          <button
            onClick={() => {
              this.editTask(t);
            }}
          >
            Edit
          </button>
          <button
            onClick={() => {
              this.deleteTask(t);
            }}
          >
            Delete
          </button>
        </div>
      );
    }
    return accum;
  };

  editTask = task => {
    this.setState({
      editingTask: true,
      editedTaskTitle: task.title,
      editedTaskDone: task.done,
      editedTaskID: task._id
    });
  };

  updateTask = event => {
    let newTask = {
      _id: this.state.editedTaskID,
      title: this.state.editedTaskTitle,
      done: this.state.editedTaskDone
    };

    axios.put(baseURL + '/task', {
        ...newTask
    })

    let clonedArray = this.state.tasks.map(function(eachTask) {
      if (eachTask._id != newTask._id) {
        return eachTask;
      } else {
        return newTask;
      }
    });

    this.setState({
      tasks: clonedArray
    });
  };

  updateTaskTitle = event => {
    this.setState({
      newTaskTitle: event.target.value
    });
  };

  deleteTask = taskToDelete => {
    // 1. find the index of the task we want to delete
    let index = this.state.tasks.findIndex(t => t.id === taskToDelete.id);

    // 2. cloned the array
    // 3. remove the task from the array
    let cloned = [
      ...this.state.tasks.slice(0, index),
      ...this.state.tasks.slice(index + 1)
    ];
    // 4. set the cloned array back into the state
    this.setState({
      tasks: cloned
    });
  };

  async updateTaskCheckbox(task) {
    // 1. clone the object that you are changing
    let clonedTask = { ...task };

    // 2. change the object
    clonedTask.done = !clonedTask.done;

    axios.put(baseURL + "/task", {
      ...clonedTask
    });

    // 200 means OK
    // if (response.status == 200) {
      // 3. clone the array that you are changing
      let clonedArray = [...this.state.tasks];

      // 4. replace the original object at the same index in the cloned array with the cloned object
      let index = this.state.tasks.findIndex(function(eachTask) {
        return eachTask._id == task._id;
      });

      // 4.1 update the cloned array with the new updated task
      clonedArray[index] = clonedTask;

      // 5. put the cloned array into the state
      this.setState({
        tasks: clonedArray
      });
    // }
  }

  addTask = async event => {
    // create a new task from the values given by the user
    let newTask = {
      title: this.state.newTaskTitle,
      done: false
    };

    // ADD TO MONGO HERE
    let response = await axios.post(baseURL + "/task", newTask);

    // store the ID generated by mongo back into our task
    newTask._id = response.data._id;

    // add the new task into the tasks array
    let clone = [...this.state.tasks];

    // add to the back of the array
    clone.push(newTask);

    // update the state
    this.setState({
      tasks: clone
    });
  };

  updateFormField = event => {
    this.setState({
      [event.target.name]: event.target.value
    });
  };

  updateCheckbox = event => {
    console.log(event.target.value);
    this.setState({
      [event.target.name]: event.target.checked
    });
  };

  render() {
    return (
      <React.Fragment>
        <h1>Add New Task</h1>
        <div>
          <label>Title:</label>
          <input
            type="text"
            name="title"
            value={this.state.newTaskTitle}
            onChange={this.updateTaskTitle}
          />
        </div>
        <button onClick={this.addTask}>Add Task</button>
        <h1>Task List</h1>
        {this.renderTaskList()}
        <div
          id="popup"
          style={{
            display: this.state.editingTask ? "block" : "none"
          }}
        >
          <div>
            <label>Title:</label>
            <input
              type="text"
              name="editedTaskTitle"
              onChange={this.updateFormField}
              value={this.state.editedTaskTitle}
            />
          </div>
          <div>
            <label>Done:</label>
            <input
              type="checkbox"
              name="editedTaskDone"
              onChange={this.updateCheckbox}
              checked={this.state.editedTaskDone}
            />
          </div>

          <button
            onClick={() => {
              this.setState({
                editingTask: false
              });
              this.updateTask();
            }}
          >
            OK
          </button>
        </div>
      </React.Fragment>
    );
  }
}
